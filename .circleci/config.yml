version: 2.1

orbs:
  node: circleci/node@5.2.0
  docker: circleci/docker@2.5.0
  kubernetes: circleci/kubernetes@1.3.1

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17
  docker-executor:
    docker:
      - image: cimg/base:stable

commands:
  npm_install:
    parameters:
      app_dir:
        type: string
        description: "Directory of the npm application"
    steps:
      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "<< parameters.app_dir >>/package-lock.json" }}
            - v1-deps-{{ .Branch }}-
            - v1-deps-
      - run:
          name: Install Dependencies
          command: npm ci
          working_directory: << parameters.app_dir >>
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "<< parameters.app_dir >>/package-lock.json" }}
          paths:
            - << parameters.app_dir >>/node_modules

jobs:
  test_and_lint_backend:
    executor: node-executor
    steps:
      - checkout
      - npm_install:
          app_dir: backend
      - run:
          name: Lint Backend
          command: npm run lint
          working_directory: backend
      - run:
          name: Test Backend
          command: npm test --passWithNoTests
          working_directory: backend

  test_and_lint_frontend:
    executor: node-executor
    steps:
      - checkout
      - npm_install:
          app_dir: frontend
      - run:
          name: Lint Frontend
          command: npm run lint
          working_directory: frontend
      - run:
          name: Test Frontend
          command: npm test --passWithNoTests
          working_directory: frontend

  security_scan:
    executor: node-executor
    steps:
      - checkout
      - npm_install:
          app_dir: backend
      - npm_install:
          app_dir: frontend
      - run:
          name: "NPM Audit: Backend"
          command: npm audit
          working_directory: backend
      - run:
          name: "NPM Audit: Frontend"
          command: npm audit
          working_directory: frontend

  build_and_push_backend:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Login
          command: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin
      - docker/check
      - docker/build:
          image: "$DOCKER_LOGIN/lab2-backend"
          tag: "<< pipeline.git.revision >>"
          dockerfile: ./backend/Dockerfile
      - docker/push:
          image: "$DOCKER_LOGIN/lab2-backend"
          tag: "<< pipeline.git.revision >>"

  build_and_push_frontend:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Login
          command: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin
      - docker/check
      - docker/build:
          image: "$DOCKER_LOGIN/lab2-frontend"
          tag: "<< pipeline.git.revision >>"
          dockerfile: ./frontend/Dockerfile
      - docker/push:
          image: "$DOCKER_LOGIN/lab2-frontend"
          tag: "<< pipeline.git.revision >>"

  deploy_to_kubernetes:
    executor: docker-executor
    steps:
      - kubernetes/install
      - run:
          name: "Deploy to Production"
          command: |
            echo "Deploying version << pipeline.git.revision >> to Kubernetes..."
            echo "Deployment complete!"

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - test_and_lint_backend
      - test_and_lint_frontend
      - security_scan

      - build_and_push_backend:
          requires:
            - test_and_lint_backend
            - security_scan
          context:
            - docker-credentials

      - build_and_push_frontend:
          requires:
            - test_and_lint_frontend
            - security_scan
          context:
            - docker-credentials

      - hold_for_deploy:
          type: approval
          requires:
            - build_and_push_backend
            - build_and_push_frontend
          filters:
            branches:
              only:
                - main

      - deploy_to_kubernetes:
          requires:
            - hold_for_deploy
          context:
            - kubernetes-credentials
          filters:
            branches:
              only:
                - main
